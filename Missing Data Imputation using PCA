{"metadata":{"kernelspec":{"language":"python","display_name":"Python 3","name":"python3"},"language_info":{"name":"python","version":"3.7.12","mimetype":"text/x-python","codemirror_mode":{"name":"ipython","version":3},"pygments_lexer":"ipython3","nbconvert_exporter":"python","file_extension":".py"}},"nbformat_minor":4,"nbformat":4,"cells":[{"cell_type":"markdown","source":"A zoologist obtained measurements of the mass (in grams), the snout-vent length (SVL) and hind\nlimb span (HLS) in mm of 25 lizards. The mean and covariance matrix of the data about the mean\nare given below.\n\nThe largest eigenvalue of the above covariance matrix is 250.4. Determine the normalized eigenvector corresponding to this eigenvalue. Also determine the remaining eigenvalues and corresponding mutually orthogonal eigenvectors.\n\nHow many principal components should be retained, if at least 95% of the variance in the data has to be captured.\n\nAssuming that there are two linear relationships among the three variables, determine one possible set of these linear relations.\n\nUsing the PCA model, determine the scores for a female lizard with the following measurements: mass = 10.1 gms, SVL = 73mm and HLS = 135.5mm.\n\nUsing the PCA model, estimate the mass of a lizard whose measured SVL is 73mm.\n\nUsing the PCA model, estimate the mass of a lizard whose measured SVL is 73mm and measured HLS is 135.5 mm.","metadata":{}},{"cell_type":"markdown","source":"![Screenshot_20230303_084432.png](attachment:a0b31f0b-c6e5-4f11-9ace-f49ba72e3bf9.png)","metadata":{},"attachments":{"a0b31f0b-c6e5-4f11-9ace-f49ba72e3bf9.png":{"image/png":""}}},{"cell_type":"code","source":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle/python Docker image: https://github.com/kaggle/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"../input/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('/kaggle/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (/kaggle/working/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to /kaggle/temp/, but they won't be saved outside of the current session","metadata":{"_uuid":"8f2839f25d086af736a60e9eeb907d3b93b6e0e5","_cell_guid":"b1076dfc-b9ad-4769-8c92-a6c4dae69d19","execution":{"iopub.status.busy":"2023-05-11T12:59:15.629153Z","iopub.execute_input":"2023-05-11T12:59:15.629781Z","iopub.status.idle":"2023-05-11T12:59:15.680073Z","shell.execute_reply.started":"2023-05-11T12:59:15.629723Z","shell.execute_reply":"2023-05-11T12:59:15.678744Z"},"trusted":true},"execution_count":1,"outputs":[]},{"cell_type":"markdown","source":"Importing necessary libraries.","metadata":{}},{"cell_type":"code","source":"import scipy.io\nfrom matplotlib import pyplot as plt\nimport seaborn as sns\nfrom sklearn.preprocessing import StandardScaler","metadata":{"execution":{"iopub.status.busy":"2023-05-11T12:59:15.684907Z","iopub.execute_input":"2023-05-11T12:59:15.685812Z","iopub.status.idle":"2023-05-11T12:59:16.649059Z","shell.execute_reply.started":"2023-05-11T12:59:15.685752Z","shell.execute_reply":"2023-05-11T12:59:16.647748Z"},"trusted":true},"execution_count":2,"outputs":[]},{"cell_type":"markdown","source":"Given covariance matrix as S.","metadata":{}},{"cell_type":"code","source":"S=[[7,21,34],[21,64,102],[34,102,186]]","metadata":{"execution":{"iopub.status.busy":"2023-05-11T12:59:16.650513Z","iopub.execute_input":"2023-05-11T12:59:16.650885Z","iopub.status.idle":"2023-05-11T12:59:16.658671Z","shell.execute_reply.started":"2023-05-11T12:59:16.650836Z","shell.execute_reply":"2023-05-11T12:59:16.656614Z"},"trusted":true},"execution_count":3,"outputs":[]},{"cell_type":"markdown","source":"Calculating the eigenvalues and eigenvectors.","metadata":{}},{"cell_type":"code","source":"eig_vals, eig_vecs = np.linalg.eig(S)\nprint(len(eig_vals))\nprint(eig_vecs.shape)","metadata":{"execution":{"iopub.status.busy":"2023-05-11T12:59:16.662370Z","iopub.execute_input":"2023-05-11T12:59:16.663186Z","iopub.status.idle":"2023-05-11T12:59:16.687226Z","shell.execute_reply.started":"2023-05-11T12:59:16.663121Z","shell.execute_reply":"2023-05-11T12:59:16.685421Z"},"trusted":true},"execution_count":4,"outputs":[{"name":"stdout","text":"3\n(3, 3)\n","output_type":"stream"}]},{"cell_type":"code","source":"# Printing the Eigen vectors and Eigen values\nprint('Eigen Vectors \\n%s', eig_vecs)\nprint('\\n Eigen Values \\n%s', eig_vals)","metadata":{"execution":{"iopub.status.busy":"2023-05-11T12:59:16.689673Z","iopub.execute_input":"2023-05-11T12:59:16.690354Z","iopub.status.idle":"2023-05-11T12:59:16.706779Z","shell.execute_reply.started":"2023-05-11T12:59:16.690304Z","shell.execute_reply":"2023-05-11T12:59:16.704473Z"},"trusted":true},"execution_count":5,"outputs":[{"name":"stdout","text":"Eigen Vectors \n%s [[ 0.16191025  0.95890336 -0.23300092]\n [ 0.48767833 -0.28302089 -0.8258747 ]\n [ 0.85787815 -0.02008808  0.51346037]]\n\n Eigen Values \n%s [2.50400915e+02 8.95711992e-02 6.50951385e+00]\n","output_type":"stream"}]},{"cell_type":"markdown","source":"To know the variance explained by the individual PC, pair up the respective eigen vectors and values.","metadata":{}},{"cell_type":"code","source":"eigen_pairs = [(np.abs(eig_vals[i]), eig_vecs[:,i]) for i in range(len(eig_vals))]\neigen_pairs_sorted = sorted(eigen_pairs, reverse=True)","metadata":{"execution":{"iopub.status.busy":"2023-05-11T12:59:16.709088Z","iopub.execute_input":"2023-05-11T12:59:16.709508Z","iopub.status.idle":"2023-05-11T12:59:16.722016Z","shell.execute_reply.started":"2023-05-11T12:59:16.709465Z","shell.execute_reply":"2023-05-11T12:59:16.720234Z"},"trusted":true},"execution_count":6,"outputs":[]},{"cell_type":"code","source":"eig_vals_sorted = [eigen_pairs_sorted[i][0] for i in range (len(eig_vals))]\neig_vecs_sorted = [eigen_pairs_sorted[i][1] for i in range (len(eig_vals))]","metadata":{"execution":{"iopub.status.busy":"2023-05-11T12:59:16.724155Z","iopub.execute_input":"2023-05-11T12:59:16.724698Z","iopub.status.idle":"2023-05-11T12:59:16.735696Z","shell.execute_reply.started":"2023-05-11T12:59:16.724636Z","shell.execute_reply":"2023-05-11T12:59:16.734574Z"},"trusted":true},"execution_count":7,"outputs":[]},{"cell_type":"code","source":"# Cumulative Variance Explained:\ntot = sum(eig_vals)\nvar_exp = [( i /tot ) * 100 for i in sorted(eig_vals, reverse=True)]\ncum_var_exp = np.cumsum(var_exp)\nprint(\"Cumulative Variance Explained\", cum_var_exp)","metadata":{"execution":{"iopub.status.busy":"2023-05-11T12:59:16.737109Z","iopub.execute_input":"2023-05-11T12:59:16.738340Z","iopub.status.idle":"2023-05-11T12:59:16.759596Z","shell.execute_reply.started":"2023-05-11T12:59:16.738284Z","shell.execute_reply":"2023-05-11T12:59:16.757843Z"},"trusted":true},"execution_count":8,"outputs":[{"name":"stdout","text":"Cumulative Variance Explained [ 97.43226263  99.96514739 100.        ]\n","output_type":"stream"}]},{"cell_type":"markdown","source":"The first principal component should be retained, if at least 95% of the variance in the data has to be captured.","metadata":{}},{"cell_type":"code","source":"# Summary Plot of the cumulative Variance Explained:\n\nplt.figure(figsize=(6 , 4))\nplt.bar(range(3), var_exp, alpha = 0.5, align = 'center', label = 'Individual explained variance')\nplt.step(range(3), cum_var_exp, where='mid', label = 'Cumulative explained variance')\nplt.ylabel('Explained Variance Ratio')\nplt.xlabel('Principal Components')\nplt.legend(loc = 'best')\nplt.tight_layout()\nplt.show()","metadata":{"execution":{"iopub.status.busy":"2023-05-11T12:59:16.762024Z","iopub.execute_input":"2023-05-11T12:59:16.763186Z","iopub.status.idle":"2023-05-11T12:59:17.147317Z","shell.execute_reply.started":"2023-05-11T12:59:16.763136Z","shell.execute_reply":"2023-05-11T12:59:17.145501Z"},"trusted":true},"execution_count":9,"outputs":[{"output_type":"display_data","data":{"text/plain":"<Figure size 600x400 with 1 Axes>","image/png":"\n"},"metadata":{}}]},{"cell_type":"markdown","source":"Printing the decomposition of covariance matrix using SVD.","metadata":{}},{"cell_type":"code","source":"U,D,VT=np.linalg.svd(S)\nprint(\"loadings\",U)\nprint(\"scores\",VT)\nprint(D)","metadata":{"execution":{"iopub.status.busy":"2023-05-11T12:59:17.152391Z","iopub.execute_input":"2023-05-11T12:59:17.153718Z","iopub.status.idle":"2023-05-11T12:59:17.164297Z","shell.execute_reply.started":"2023-05-11T12:59:17.153645Z","shell.execute_reply":"2023-05-11T12:59:17.162993Z"},"trusted":true},"execution_count":10,"outputs":[{"name":"stdout","text":"loadings [[-0.16191025 -0.23300092 -0.95890336]\n [-0.48767833 -0.8258747   0.28302089]\n [-0.85787815  0.51346037  0.02008808]]\nscores [[-0.16191025 -0.48767833 -0.85787815]\n [-0.23300092 -0.8258747   0.51346037]\n [-0.95890336  0.28302089  0.02008808]]\n[2.50400915e+02 6.50951385e+00 8.95711992e-02]\n","output_type":"stream"}]},{"cell_type":"markdown","source":"To determine one possible set of the linear relations between the three variables, taking one PC with high eigen value and forming the relationship.","metadata":{}},{"cell_type":"markdown","source":"In PCA, given a mean centered dataset **X** with **n** samples and **p** variables, the first principal component **PC1** is given by the linear combination of the original variables **X1,X2,...Xp**\n\n                PC1=w11*X1 + w12*X2 +........w1p*Xp\n\nThe first principal component PC1 represents the component that retains the maximum variance of the data. **w1** corresponds to an eigenvector of the covariance matrix and the elements of the eigenvector \n**w11,...** and are also known as loadings.\n\nPCA loadings are the coefficients of the linear combination of the original variables from which the principal components (PCs) are constructed.","metadata":{}},{"cell_type":"markdown","source":"Therefore, the linear relationship between the variables is\n\nPC1=(-0.161)*(mass) + (-0.233)*(SVL) + (-0.958)*(HLS)\n\nPC2=(-0.487)*(mass) + (-0.825)*(SVL) + (0.283)*(HLS)\n\nPC3=(-0.857)*(mass) + (0.513)*(SVL) + (0.02)*(HLS)","metadata":{}},{"cell_type":"markdown","source":"Using the PCA model, determine the scores for a female lizard with the following measurements: mass = 10.1 gms, SVL = 73mm and HLS = 135.5mm.","metadata":{}},{"cell_type":"code","source":"PC1=(-0.161)*(10.1) + (-0.233)*(73) + (-0.958)*(135.5)\nprint(PC1)","metadata":{"execution":{"iopub.status.busy":"2023-05-11T12:59:17.166381Z","iopub.execute_input":"2023-05-11T12:59:17.166820Z","iopub.status.idle":"2023-05-11T12:59:17.181649Z","shell.execute_reply.started":"2023-05-11T12:59:17.166777Z","shell.execute_reply":"2023-05-11T12:59:17.179668Z"},"trusted":true},"execution_count":11,"outputs":[{"name":"stdout","text":"-148.4441\n","output_type":"stream"}]},{"cell_type":"markdown","source":"The scores of the model are\n\n[[-0.16191025 -0.48767833 -0.85787815]\n\n [-0.23300092 -0.8258747   0.51346037]\n \n [-0.95890336  0.28302089  0.02008808]]\n","metadata":{}},{"cell_type":"markdown","source":"**RECONSTRUCTION OF DATA:**\n\n\nTo reconstruct an observation xi using K principal components, we follow these steps:\n\n* Center the observation by subtracting the mean m: xi = xi - m\n\n* Project the centered observation onto the first K principal components to obtain a K-dimensional representation: zi = P' * x_i, where P' is the transpose of P (principal components matrix).\n\n* Reconstruct the observation using the K-dimensional representation and the first K principal components: xi^ = P * zi\n\n* Add back the mean m to the reconstructed observation: xi^ = xi^ + m\n\nThe reconstructed observation xi^ is an approximation of the original observation xi using K principal components.","metadata":{}},{"cell_type":"markdown","source":"Using the PCA model, estimate the mass of a lizard whose measured SVL is 73mm.","metadata":{}},{"cell_type":"markdown","source":"Here,we have the observation for variable SVL only. So lets take the remaining variables observations as their mean since we have no data for them. Also taking the top 2 PCs for the reconstruction.","metadata":{}},{"cell_type":"code","source":"# Reverse PCA transformation\n\ndata=np.array([9 ,73,129])\n\n# given mean of the data\nmean=np.array([9,68,129])\n\n# centering the observation\nmean_data=data-mean\n\n# taking top 2 PCs\npca_data = mean_data.dot(eig_vecs[:,:2])\nrecon_data = pca_data.dot(eig_vecs[:,:2].T) + mean\n\nprint(recon_data)","metadata":{"execution":{"iopub.status.busy":"2023-05-11T13:32:53.718788Z","iopub.execute_input":"2023-05-11T13:32:53.719583Z","iopub.status.idle":"2023-05-11T13:32:53.731041Z","shell.execute_reply.started":"2023-05-11T13:32:53.719512Z","shell.execute_reply":"2023-05-11T13:32:53.729813Z"},"trusted":true},"execution_count":22,"outputs":[{"name":"stdout","text":"[  8.03785218  69.58965488 131.12026964]\n","output_type":"stream"}]},{"cell_type":"markdown","source":"**CONCLUSION 1:** From the above output, the estimated mass of a lizard whose measured SVL given as 73mm is 8.037.","metadata":{}},{"cell_type":"markdown","source":"Using the PCA model, estimate the mass of a lizard whose measured SVL is 73mm and measured HLS is 135.5 mm.","metadata":{}},{"cell_type":"markdown","source":"Here,we have the observation for variables SVL and HLS  only. So lets take the remaining variable observation as its mean since we have no data for it.","metadata":{}},{"cell_type":"code","source":"# Reverse PCA transformation\n\ndata=np.array([9 ,73,135.5])\n\n# given mean of the data\nmean=np.array([9,68,129])\n\n# centering the observation\nmean_data=data-mean\n\n# taking top 2 PCs\npca_data = mean_data.dot(eig_vecs[:,:2])\nrecon_data = pca_data.dot(eig_vecs[:,:2].T) + mean\n\nprint(recon_data)","metadata":{"execution":{"iopub.status.busy":"2023-05-11T13:33:29.107781Z","iopub.execute_input":"2023-05-11T13:33:29.108284Z","iopub.status.idle":"2023-05-11T13:33:29.118177Z","shell.execute_reply.started":"2023-05-11T13:33:29.108243Z","shell.execute_reply":"2023-05-11T13:33:29.116489Z"},"trusted":true},"execution_count":23,"outputs":[{"name":"stdout","text":"[  8.81549097  72.34600541 135.90659957]\n","output_type":"stream"}]},{"cell_type":"markdown","source":"**CONCLUSION 2:** From the above output, the estimated mass of a lizard whose measured SVL given as 73mm is 8.815.","metadata":{}}]}
