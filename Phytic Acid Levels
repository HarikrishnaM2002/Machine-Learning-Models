{"metadata":{"kernelspec":{"language":"python","display_name":"Python 3","name":"python3"},"language_info":{"name":"python","version":"3.7.12","mimetype":"text/x-python","codemirror_mode":{"name":"ipython","version":3},"pygments_lexer":"ipython3","nbconvert_exporter":"python","file_extension":".py"}},"nbformat_minor":4,"nbformat":4,"cells":[{"cell_type":"markdown","source":"**QUESTION**:\n\nThe level of phytic acid in urine samples was determined by a catalytic fluorimetric (CF) method and the results were compared with those obtained using an established extraction photometric (EP) technique. The results, in mg/L, are the means of triplicate measurements, as given in EP_CF.csv\n\n\n(a) Is the new method (CF) a good substitute for the established method (EP) for measuring the level of phytic acid in urine? Justify your conclusion using linear regression between the two methods for different modelling assumptions regarding the accuracy of the respective measurement techniques.\n\n\n(b) Estimate the level of phytic acid in urine if EP measurement is 2.31 mg/l and provide 95% confidence interval for the estimate.","metadata":{}},{"cell_type":"code","source":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle/python Docker image: https://github.com/kaggle/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"../input/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('/kaggle/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (/kaggle/working/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to /kaggle/temp/, but they won't be saved outside of the current session","metadata":{"_uuid":"8f2839f25d086af736a60e9eeb907d3b93b6e0e5","_cell_guid":"b1076dfc-b9ad-4769-8c92-a6c4dae69d19","execution":{"iopub.status.busy":"2023-03-24T07:53:38.123376Z","iopub.execute_input":"2023-03-24T07:53:38.123800Z","iopub.status.idle":"2023-03-24T07:53:38.140524Z","shell.execute_reply.started":"2023-03-24T07:53:38.123763Z","shell.execute_reply":"2023-03-24T07:53:38.139136Z"},"trusted":true},"execution_count":53,"outputs":[{"name":"stdout","text":"/kaggle/input/phytic-acid-levels/EP_CF.xlsx\n","output_type":"stream"}]},{"cell_type":"markdown","source":"Reading the phytic-acid-levels data","metadata":{}},{"cell_type":"code","source":"acid_levels=pd.read_excel(\"/kaggle/input/phytic-acid-levels/EP_CF.xlsx\")","metadata":{"execution":{"iopub.status.busy":"2023-03-24T07:53:38.143705Z","iopub.execute_input":"2023-03-24T07:53:38.144486Z","iopub.status.idle":"2023-03-24T07:53:38.170032Z","shell.execute_reply.started":"2023-03-24T07:53:38.144429Z","shell.execute_reply":"2023-03-24T07:53:38.168717Z"},"trusted":true},"execution_count":54,"outputs":[{"name":"stdout","text":"ERROR! Session/line number was not unique in database. History logging moved to new session 16\n","output_type":"stream"}]},{"cell_type":"markdown","source":"Importing the necessary libraries.","metadata":{}},{"cell_type":"code","source":"import matplotlib .pyplot as plt\nimport pandas as pd\nimport statsmodels .api as sm\nfrom statsmodels .formula.api import ols","metadata":{"execution":{"iopub.status.busy":"2023-03-24T07:53:38.171717Z","iopub.execute_input":"2023-03-24T07:53:38.172360Z","iopub.status.idle":"2023-03-24T07:53:38.178104Z","shell.execute_reply.started":"2023-03-24T07:53:38.172322Z","shell.execute_reply":"2023-03-24T07:53:38.176719Z"},"trusted":true},"execution_count":55,"outputs":[]},{"cell_type":"code","source":"# printing the top 5 rows to check whether all columns are there or not.\nprint(acid_levels.head())\n# printing the information about the dataframe to check the existence of null values.\nacid_levels.info()","metadata":{"execution":{"iopub.status.busy":"2023-03-24T07:53:38.179900Z","iopub.execute_input":"2023-03-24T07:53:38.180399Z","iopub.status.idle":"2023-03-24T07:53:38.199806Z","shell.execute_reply.started":"2023-03-24T07:53:38.180360Z","shell.execute_reply":"2023-03-24T07:53:38.198556Z"},"trusted":true},"execution_count":56,"outputs":[{"name":"stdout","text":"     EP    CF\n0  1.98  1.87\n1  2.31  2.20\n2  3.29  3.15\n3  3.56  3.42\n4  1.23  1.10\n<class 'pandas.core.frame.DataFrame'>\nRangeIndex: 20 entries, 0 to 19\nData columns (total 2 columns):\n #   Column  Non-Null Count  Dtype  \n---  ------  --------------  -----  \n 0   EP      20 non-null     float64\n 1   CF      20 non-null     float64\ndtypes: float64(2)\nmemory usage: 448.0 bytes\n","output_type":"stream"}]},{"cell_type":"markdown","source":"Visualizing the data using scatter plot.","metadata":{}},{"cell_type":"code","source":"acid_levels.plot(\"EP\",\"CF\",kind=\"scatter\")\nplt.title(\"EP-CF\")\nplt.xlabel(\"EP\")\nplt.ylabel(\"CF\")","metadata":{"execution":{"iopub.status.busy":"2023-03-24T07:53:38.203493Z","iopub.execute_input":"2023-03-24T07:53:38.204019Z","iopub.status.idle":"2023-03-24T07:53:38.449927Z","shell.execute_reply.started":"2023-03-24T07:53:38.203953Z","shell.execute_reply":"2023-03-24T07:53:38.448547Z"},"trusted":true},"execution_count":57,"outputs":[{"execution_count":57,"output_type":"execute_result","data":{"text/plain":"Text(0, 0.5, 'CF')"},"metadata":{}},{"output_type":"display_data","data":{"text/plain":"<Figure size 640x480 with 1 Axes>","image/png":"\n"},"metadata":{}}]},{"cell_type":"markdown","source":"In statsmodels, ordinary least-squares linear models are specified via the function ols (short for ordinary least-squares).","metadata":{}},{"cell_type":"code","source":"# Building the ols model between CF and EP\nmodel = ols(\"CF~EP\", data=acid_levels)\nmodel_matrix = pd. DataFrame (model.exog ,columns=model. exog_names )\nprint( model_matrix )","metadata":{"execution":{"iopub.status.busy":"2023-03-24T07:53:38.451604Z","iopub.execute_input":"2023-03-24T07:53:38.452023Z","iopub.status.idle":"2023-03-24T07:53:38.470300Z","shell.execute_reply.started":"2023-03-24T07:53:38.451984Z","shell.execute_reply":"2023-03-24T07:53:38.468947Z"},"trusted":true},"execution_count":58,"outputs":[{"name":"stdout","text":"    Intercept    EP\n0         1.0  1.98\n1         1.0  2.31\n2         1.0  3.29\n3         1.0  3.56\n4         1.0  1.23\n5         1.0  1.57\n6         1.0  2.05\n7         1.0  0.66\n8         1.0  0.31\n9         1.0  2.82\n10        1.0  0.13\n11        1.0  3.15\n12        1.0  2.72\n13        1.0  2.31\n14        1.0  1.92\n15        1.0  1.56\n16        1.0  0.94\n17        1.0  2.27\n18        1.0  3.17\n19        1.0  2.36\n","output_type":"stream"}]},{"cell_type":"code","source":"#fit the model defined above\nfit = model.fit ()\nb0 , b1 = fit.params\nprint(fit.params)","metadata":{"execution":{"iopub.status.busy":"2023-03-24T07:53:38.472000Z","iopub.execute_input":"2023-03-24T07:53:38.472385Z","iopub.status.idle":"2023-03-24T07:53:38.485698Z","shell.execute_reply.started":"2023-03-24T07:53:38.472347Z","shell.execute_reply":"2023-03-24T07:53:38.483999Z"},"trusted":true},"execution_count":59,"outputs":[{"name":"stdout","text":"Intercept   -0.049713\nEP           0.992415\ndtype: float64\n","output_type":"stream"}]},{"cell_type":"markdown","source":"The above output gives the least-squares estimates of β0 and β1.","metadata":{}},{"cell_type":"markdown","source":"Visualizing the data with the Regression line using scatter plot.","metadata":{}},{"cell_type":"code","source":"plt.plot(acid_levels.EP , b0 + b1*acid_levels.EP)\nplt.scatter(acid_levels.EP , acid_levels.CF)\nplt.xlabel(\"EP\")\nplt.ylabel(\"CF\")","metadata":{"execution":{"iopub.status.busy":"2023-03-24T07:53:38.487761Z","iopub.execute_input":"2023-03-24T07:53:38.488590Z","iopub.status.idle":"2023-03-24T07:53:38.750974Z","shell.execute_reply.started":"2023-03-24T07:53:38.488534Z","shell.execute_reply":"2023-03-24T07:53:38.749922Z"},"trusted":true},"execution_count":60,"outputs":[{"execution_count":60,"output_type":"execute_result","data":{"text/plain":"Text(0, 0.5, 'CF')"},"metadata":{}},{"output_type":"display_data","data":{"text/plain":"<Figure size 640x480 with 1 Axes>","image/png":"\n"},"metadata":{}}]},{"cell_type":"markdown","source":"Although ols performs a complete analysis of the linear model, not all its calculations\nneed to be presented. A summary of the results can be obtained with the method summary.","metadata":{}},{"cell_type":"code","source":"print(fit.summary ())","metadata":{"execution":{"iopub.status.busy":"2023-03-24T07:53:38.752150Z","iopub.execute_input":"2023-03-24T07:53:38.753177Z","iopub.status.idle":"2023-03-24T07:53:38.766943Z","shell.execute_reply.started":"2023-03-24T07:53:38.753135Z","shell.execute_reply":"2023-03-24T07:53:38.765499Z"},"trusted":true},"execution_count":61,"outputs":[{"name":"stdout","text":"                            OLS Regression Results                            \n==============================================================================\nDep. Variable:                     CF   R-squared:                       0.993\nModel:                            OLS   Adj. R-squared:                  0.993\nMethod:                 Least Squares   F-statistic:                     2670.\nDate:                Fri, 24 Mar 2023   Prob (F-statistic):           5.03e-21\nTime:                        07:53:38   Log-Likelihood:                 22.483\nNo. Observations:                  20   AIC:                            -40.97\nDf Residuals:                      18   BIC:                            -38.98\nDf Model:                           1                                         \nCovariance Type:            nonrobust                                         \n==============================================================================\n                 coef    std err          t      P>|t|      [0.025      0.975]\n------------------------------------------------------------------------------\nIntercept     -0.0497      0.043     -1.158      0.262      -0.140       0.040\nEP             0.9924      0.019     51.676      0.000       0.952       1.033\n==============================================================================\nOmnibus:                        0.956   Durbin-Watson:                   1.423\nProb(Omnibus):                  0.620   Jarque-Bera (JB):                0.571\nSkew:                           0.405   Prob(JB):                        0.752\nKurtosis:                       2.830   Cond. No.                         6.05\n==============================================================================\n\nNotes:\n[1] Standard Errors assume that the covariance matrix of the errors is correctly specified.\n","output_type":"stream"}]},{"cell_type":"markdown","source":"The main output items are the following:\n\n• **coef**: Estimates of the parameters of the regression line.\n\n• **std error**: Standard deviations of the estimators of the regression line. These are the square roots of the variances of the {bβi} obtained.\n\n• **t**: Realization of test statistics associated with the hypotheses H0 : βi = 0 and H1 : βi , 0, i = 0, 1. In particular, the outcome of T.\n\n• **P>|t|** : P-value of test (two-sided test).\n\n• **[0.025 0.975]**: 95% confidence intervals for the parameters.\n\n• R-**Squared**: Coefficient of determination R2 (percentage of variation explained by the regression)\n\n• **Adj. R-Squared**: adjusted R2\n\n• F-**statistic**: Realization of the F test statistic associated with testing the full model against the default model. The associated degrees of freedom (Df Model and Df Residuals) are given, as is the P-value: Prob (F-statistic).\n\n• **AIC**: The AIC number is, minus two times the log-likelihood plus two times the number of model parameters.","metadata":{}},{"cell_type":"markdown","source":"As the p-value of the Intercept coefficent is greater than 0.005, we can neglect that coefficient and rebuild the model. The Intercept variable can be dropped by adding '-1' to the formula.","metadata":{}},{"cell_type":"markdown","source":"Bulding another model without the Intercept variable","metadata":{}},{"cell_type":"code","source":"model2 = ols(\"CF~EP-1\", data=acid_levels)\nfit2 = model2.fit () #fit the model defined above\nb00  = fit2.params\nprint(fit2.params)","metadata":{"execution":{"iopub.status.busy":"2023-03-24T07:53:38.768560Z","iopub.execute_input":"2023-03-24T07:53:38.769219Z","iopub.status.idle":"2023-03-24T07:53:38.788150Z","shell.execute_reply.started":"2023-03-24T07:53:38.769175Z","shell.execute_reply":"2023-03-24T07:53:38.786848Z"},"trusted":true},"execution_count":62,"outputs":[{"name":"stdout","text":"EP    0.972349\ndtype: float64\n","output_type":"stream"}]},{"cell_type":"markdown","source":"The above output gives the least-squares estimates of β0.","metadata":{}},{"cell_type":"code","source":"print(fit2.summary ())","metadata":{"execution":{"iopub.status.busy":"2023-03-24T07:53:38.789295Z","iopub.execute_input":"2023-03-24T07:53:38.789705Z","iopub.status.idle":"2023-03-24T07:53:38.806231Z","shell.execute_reply.started":"2023-03-24T07:53:38.789665Z","shell.execute_reply":"2023-03-24T07:53:38.804574Z"},"trusted":true},"execution_count":63,"outputs":[{"name":"stdout","text":"                                 OLS Regression Results                                \n=======================================================================================\nDep. Variable:                     CF   R-squared (uncentered):                   0.999\nModel:                            OLS   Adj. R-squared (uncentered):              0.999\nMethod:                 Least Squares   F-statistic:                          1.350e+04\nDate:                Fri, 24 Mar 2023   Prob (F-statistic):                    1.45e-28\nTime:                        07:53:38   Log-Likelihood:                          21.764\nNo. Observations:                  20   AIC:                                     -41.53\nDf Residuals:                      19   BIC:                                     -40.53\nDf Model:                           1                                                  \nCovariance Type:            nonrobust                                                  \n==============================================================================\n                 coef    std err          t      P>|t|      [0.025      0.975]\n------------------------------------------------------------------------------\nEP             0.9723      0.008    116.208      0.000       0.955       0.990\n==============================================================================\nOmnibus:                        1.607   Durbin-Watson:                   1.451\nProb(Omnibus):                  0.448   Jarque-Bera (JB):                0.848\nSkew:                           0.504   Prob(JB):                        0.654\nKurtosis:                       3.009   Cond. No.                         1.00\n==============================================================================\n\nNotes:\n[1] R² is computed without centering (uncentered) since the model does not contain a constant.\n[2] Standard Errors assume that the covariance matrix of the errors is correctly specified.\n","output_type":"stream"}]},{"cell_type":"markdown","source":"From the summary above, we can clearly say that the model is well fitted without the Intercept term.","metadata":{}},{"cell_type":"markdown","source":"Estimating the level of phytic acid in urine if EP measurement is 2.31 mg/l using **\"fit.get_prediction()\"** and calculating the 95% confidence interval for the estimate using **\"summary_frame\"** using model2 which is without Intercept term.","metadata":{}},{"cell_type":"code","source":"x={\"EP\":2.31}\npred2 = fit2. get_prediction (x)\npred2. summary_frame (alpha =0.05).unstack ()","metadata":{"execution":{"iopub.status.busy":"2023-03-24T07:53:38.807712Z","iopub.execute_input":"2023-03-24T07:53:38.808130Z","iopub.status.idle":"2023-03-24T07:53:38.825312Z","shell.execute_reply.started":"2023-03-24T07:53:38.808089Z","shell.execute_reply":"2023-03-24T07:53:38.823639Z"},"trusted":true},"execution_count":64,"outputs":[{"execution_count":64,"output_type":"execute_result","data":{"text/plain":"mean           0    2.246127\nmean_se        0    0.019328\nmean_ci_lower  0    2.205672\nmean_ci_upper  0    2.286582\nobs_ci_lower   0    2.066499\nobs_ci_upper   0    2.425755\ndtype: float64"},"metadata":{}}]},{"cell_type":"markdown","source":"Summary frame of mean, variance and confidence interval.\n\nReturns:\nDataFrame\nDataFrame containing four columns:\n\nmean\n\nmean_se\n\nmean_ci_lower\n\nmean_ci_upper\n\nFixes alpha to 0.05 so that the confidence interval should have 95% coverage.","metadata":{}},{"cell_type":"markdown","source":"**CONCLUSION 1**:\n\nThe level of phytic acid in urine if EP measurement is 2.31 mg/l is 2.246 mg/l.\nPredictionResults.summary_frame(alpha=0.05)\n\nThe mean_ci column contain the lower and upper bounds of the confidence interval for the prediction of CF. If EP is 2.31mg/l, then the 95% CI for the estimate is **[2.2056,2.2865]**","metadata":{}},{"cell_type":"code","source":"print(acid_levels.corr())","metadata":{"execution":{"iopub.status.busy":"2023-03-24T07:53:38.827374Z","iopub.execute_input":"2023-03-24T07:53:38.828765Z","iopub.status.idle":"2023-03-24T07:53:38.839113Z","shell.execute_reply.started":"2023-03-24T07:53:38.828706Z","shell.execute_reply":"2023-03-24T07:53:38.837852Z"},"trusted":true},"execution_count":65,"outputs":[{"name":"stdout","text":"          EP        CF\nEP  1.000000  0.996647\nCF  0.996647  1.000000\n","output_type":"stream"}]},{"cell_type":"markdown","source":"**CONCLUSION 2**:\n\nThe new method (CF) a good substitute for the established method (EP) because the both methods are correlated much and the fitted model suggests that the difference between the measured values for both the techniques is nearly negligible.Also there is no intercept term, it clearly indicates that the CF is 0.97 times the EP.","metadata":{}}]}
